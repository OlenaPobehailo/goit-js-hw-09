{"mappings":"qhBAoBA,IAAAA,EAAAC,EAAA,SAGA,MAAMC,EAAUC,SAASC,cAAc,SAqCvC,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GAEhCC,EAAgB,C,SACpBL,E,MACAC,GAEF,OAAO,IAAIK,SAAQ,CAACC,EAASC,KACvBN,GAEFK,EAAQF,GACRI,QAAQC,IAAIC,SAGZH,EAAOH,EAAc,G,CAlD3BT,EAAQgB,iBAAiB,UAIzB,SAAsBC,GACpBA,EAAEC,iBAEF,IAAIC,EAAQC,OAAOH,EAAEI,OAAOhB,MAAMiB,OAC9BC,EAAOH,OAAOH,EAAEI,OAAOE,KAAKD,OAC5BE,EAASJ,OAAOH,EAAEI,OAAOG,OAAOF,OACpCG,EAAA3B,GAAS4B,OAAOC,KAAK,CAACvB,SAAU,WAAWwB,SAAU,UAErDf,QAAQC,IAAI,QAASK,GACrBN,QAAQC,IAAI,OAAQS,GACpBV,QAAQC,IAAI,SAAUU,GAGtB,IAAK,IAAIK,EAAW,EAAGA,GAAYL,EAAQK,GAAY,EACrD1B,EAAc0B,EAAUV,GACrBW,MAAK,EAAC1B,SAAEA,EAAQC,MAAEA,MACjB0B,YAAW,KAETN,EAAA3B,GAAS4B,OAAOM,QAAQ,uBAAqB5B,QAAiBC,MAAU,GACvEA,EAAM,IAEV4B,OAAM,EAAC7B,SAAEA,EAAQC,MAAEA,MAClB0B,YAAW,KAETN,EAAA3B,GAAS4B,OAAOQ,QAAQ,sBAAoB9B,QAAeC,MAAU,GACpEA,EAAM,IAGbc,GAASI,C,IA9BbV,QAAQC,IAAId","sources":["src/js/03-promises.js"],"sourcesContent":["/*\nHTML містить розмітку форми, в поля якої користувач буде вводити першу затримку в мілісекундах, крок збільшення затримки для кожного промісу після першого і кількість промісів, яку необхідно створити.\n\nНапиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay) стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер промісу (position), що створюється, і затримку, враховуючи першу затримку (delay), введену користувачем, і крок (step).\n\nДоповни код функції createPromise таким чином, щоб вона повертала один проміс, який виконується або відхиляється через delay часу. Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того, що потрібно зробити з промісом - виконати або відхилити.\n*/\n\n// const refs = {\n//   delay: document.querySelector('input[name=\"delay\"]'),\n//   step: document.querySelector('input[name=\"step\"]'),\n//   amount: document.querySelector('input[name=\"amount\"]'),\n//   submitBtn: document.querySelector('button[type=\"submit\"]'),\n// };\n\n// refs.delay.addEventListener('input', onDelayInput);\n// refs.step.addEventListener('input', onStepInput);\n// refs.amount.addEventListener('input', onAmountInput);\n// refs.submitBtn.addEventListener('click', onSubmitBtnClick);\n\nimport Notiflix from 'notiflix';\n\n\nconst formRef = document.querySelector('.form');\nformRef.addEventListener('submit', onFormSubmit);\n\nconsole.log(formRef);\n\nfunction onFormSubmit(e) {\n  e.preventDefault();\n\n  let delay = Number(e.target.delay.value);\n  let step = Number(e.target.step.value);\n  let amount = Number(e.target.amount.value);\n  Notiflix.Notify.init({position: 'left-top',distance: '150px',});\n\n  console.log('delay', delay);\n  console.log('step', step);\n  console.log('amount', amount);\n\n\n  for (let position = 1; position <= amount; position += 1) {\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        setTimeout(() => {\n          //console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n          Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        }, delay);\n      })\n      .catch(({ position, delay }) => {\n        setTimeout(() => {\n          //console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n          Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        }, delay);\n      });\n\n    delay += step;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  const objectPromise = {\n    position,\n    delay,\n  };\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      // Fulfill\n      resolve(objectPromise);\n      console.log(object);\n    } else {\n      // Reject\n      reject(objectPromise);\n    }\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$formRef","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","objectPromise","Promise","resolve","reject","console","log","object","addEventListener","e","preventDefault","delay1","Number","target","value","step","amount","$parcel$interopDefault","Notify","init","distance","position1","then","setTimeout","success","catch","failure"],"version":3,"file":"03-promises.0df3ca11.js.map"}